import 'dart:ui';
import 'package:flutter/material.dart';
import '../utils/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: appTheme.deepOrange700,
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.tealA700,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              12,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.cyan300,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              12,
            ),
          ),
          shadowColor: appTheme.black900.withOpacity(0.08),
          elevation: 3,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 27,
        space: 27,
        color: appTheme.gray40001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray400,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray600,
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.blueGray600,
          fontSize: getFontSize(
            36,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF2D3A4C),
    primaryContainer: Color(0XFFC4C4C4),
    secondary: Color(0XFFC4C4C4),
    secondaryContainer: Color(0XFF2D3A4C),
    tertiary: Color(0XFFC4C4C4),
    tertiaryContainer: Color(0XFF2D3A4C),

    // Background colors
    background: Color(0XFFC4C4C4),

    // Surface colors
    surface: Color(0XFFC4C4C4),
    surfaceTint: Color(0XB2FFFFFF),
    surfaceVariant: Color(0XFF2D3A4C),

    // Error colors
    error: Color(0XB2FFFFFF),
    errorContainer: Color(0XFF4C4C4C),
    onError: Color(0XFF2D3A4C),
    onErrorContainer: Color(0XB2FFFFFF),

    // On colors(text colors)
    onBackground: Color(0XFF1E1818),
    onInverseSurface: Color(0XFF2D3A4C),
    onPrimary: Color(0XB2FFFFFF),
    onPrimaryContainer: Color(0XFF1E1818),
    onSecondary: Color(0XFF1E1818),
    onSecondaryContainer: Color(0XB2FFFFFF),
    onTertiary: Color(0XFF1E1818),
    onTertiaryContainer: Color(0XB2FFFFFF),

    // Other colors
    outline: Color(0XB2FFFFFF),
    outlineVariant: Color(0XFFC4C4C4),
    scrim: Color(0XFFC4C4C4),
    shadow: Color(0XB2FFFFFF),

    // Inverse colors
    inversePrimary: Color(0XFFC4C4C4),
    inverseSurface: Color(0XB2FFFFFF),

    // Pending colors
    onSurface: Color(0XFF1E1818),
    onSurfaceVariant: Color(0XB2FFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFBF1C);

  // Black
  Color get black900 => Color.fromARGB(255, 255, 255, 255);

  // BlueGray
  Color get blueGray300 => Color(0XFF98A8BC);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray600 => Color.fromARGB(255, 17, 17, 17);
  Color get blueGray700 => Color(0XFF445467);
  Color get blueGray800 => Color(0XFF38475A);

  // Cyan
  Color get cyan300 => Color.fromARGB(255, 61, 61, 61);
  Color get cyanA400 => Color.fromARGB(255, 176, 233, 233);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFFDB99B);
  Color get deepOrange700 => Color(0XFFEA5911);

  // DeepPurple
  Color get deepPurpleA100 => Color(0XFFA770EF);

  // Gray
  Color get gray400 => Color(0XFFAEAEAE);
  Color get gray40001 => Color(0XFFC0C0C0);
  Color get gray50 => Color(0XFFF5FFFE);
  Color get gray500 => Color(0XFFAB9C9C);
  Color get gray900 => Color(0XFF151717);

  // Green
  Color get green500 => Color(0XFF3AE460);

  // Purple
  Color get purple200 => Color(0XFFCF8BF3);

  // Red
  Color get red600 => Color(0XFFED2525);
  Color get red700 => Color(0XFFD42C2C);

  // Teal
  Color get tealA400 => Color.fromARGB(255, 78, 189, 152);
  Color get tealA40001 => Color.fromARGB(255, 142, 218, 192);
  Color get tealA700 => Color.fromARGB(255, 250, 164, 65);
  Color get  tealA800=> Color.fromARGB(255, 253, 253, 253);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
